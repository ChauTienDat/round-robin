#include <iostream>
#include <vector>
#include <queue>
#include <iomanip>
#include <algorithm>
#include <limits>
using namespace std;

// Cấu trúc lưu thông tin tiến trình
struct TienTrinh {
    int ma;           // Mã tiến trình (P1, P2, ...)
    int den;          // Arrival time
    int xuLy;         // Burst time
    int conLai;       // Remaining time
    int hoanThanh;    // Completion time
    int quayVong;     // Turnaround time
    int cho;          // Waiting time
};

// Cấu trúc cho Gantt chart
struct Gantt {
    int batDau, ketThuc, pid; // pid = -1 nghĩa là CPU rảnh
};

int main() {
    int n;
    cout << "Nhap so luong tien trinh: " << flush;
    while (!(cin >> n) || n <= 0) {
        cout << "So luong tien trinh phai la so nguyen duong. Nhap lai: " << flush;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    vector<TienTrinh> ds(n);
    for (int i = 0; i < n; ++i) {
        ds[i].ma = i + 1;

        cout << "\n--- Nhap thong tin cho tien trinh P" << ds[i].ma << " ---\n"; // phân cách

        // Nhập arrival time >= 0
        do {
            cout << "Tien trinh P" << ds[i].ma << " - nhap thoi gian den: " << flush;
            if (!(cin >> ds[i].den)) {
                cout << "Nhap khong hop le, vui long nhap so nguyen.\n";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                continue;
            }
            if (ds[i].den < 0) {
                cout << "Thoi gian den phai >= 0. Nhap lai.\n";
                continue;
            }
            break;
        } while (true);

        // Nhập burst time >= 0
        do {
            cout << "Tien trinh P" << ds[i].ma << " - nhap thoi gian xu ly: " << flush;
            if (!(cin >> ds[i].xuLy)) {
                cout << "Nhap khong hop le, vui long nhap so nguyen.\n";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                continue;
            }
            if (ds[i].xuLy < 0) {
                cout << "Thoi gian xu ly phai >= 0. Nhap lai.\n";
                continue;
            }
            break;
        } while (true);

        ds[i].conLai = ds[i].xuLy;
        ds[i].hoanThanh = ds[i].quayVong = ds[i].cho = 0;
    }

    int quantum;
    cout << "\nNhap time quantum: " << flush;
    while (!(cin >> quantum) || quantum <= 0) {
        cout << "Time quantum phai la so nguyen duong. Nhap lai: " << flush;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    // Sắp xếp theo arrival time
    sort(ds.begin(), ds.end(), [](const TienTrinh &a, const TienTrinh &b) {
        if (a.den != b.den) return a.den < b.den;
        return a.ma < b.ma;
    });

    queue<int> hangDoi;
    int thoiGian = 0, chiSo = 0, daXong = 0;
    vector<Gantt> gantt;

    if (chiSo < n && thoiGian < ds[chiSo].den)
        thoiGian = ds[chiSo].den;

    while (chiSo < n && ds[chiSo].den <= thoiGian) {
        hangDoi.push(chiSo);
        chiSo++;
    }

    // Vòng lặp Round Robin
    while (daXong < n) {
        if (hangDoi.empty()) {
            if (chiSo < n) {
                // CPU rảnh cho tới khi tiến trình mới đến
                gantt.push_back({thoiGian, ds[chiSo].den, -1});
                thoiGian = ds[chiSo].den;
                while (chiSo < n && ds[chiSo].den <= thoiGian) {
                    hangDoi.push(chiSo);
                    chiSo++;
                }
                continue;
            } else break;
        }

        int hienTai = hangDoi.front();
        hangDoi.pop();

        int chay = min(quantum, ds[hienTai].conLai);
        int batDau = thoiGian;
        thoiGian += chay;
        ds[hienTai].conLai -= chay;
        int ketThuc = thoiGian;

        gantt.push_back({batDau, ketThuc, ds[hienTai].ma});

        while (chiSo < n && ds[chiSo].den <= thoiGian) {
            hangDoi.push(chiSo);
            chiSo++;
        }

        if (ds[hienTai].conLai > 0) {
            hangDoi.push(hienTai);
        } else {
            ds[hienTai].hoanThanh = thoiGian;
            ds[hienTai].quayVong = ds[hienTai].hoanThanh - ds[hienTai].den;
            ds[hienTai].cho = ds[hienTai].quayVong - ds[hienTai].xuLy;
            daXong++;
        }
    }

    // In biểu đồ Gantt
    cout << "\nBieu do Gantt:\n";
    for (auto &g : gantt) {
        if (g.pid == -1) cout << "| Idle ";
        else cout << "| P" << g.pid << "  ";
    }
    cout << "|\n";
    cout << gantt[0].batDau;
    for (auto &g : gantt) {
        cout << setw(6) << g.ketThuc;
    }
    cout << "\n";

    // In bảng kết quả
    sort(ds.begin(), ds.end(), [](const TienTrinh &a, const TienTrinh &b) {
        return a.ma < b.ma;
    });

    double tongTAT = 0, tongWT = 0;
    cout << "\nPID\tDen\tXu ly\tHoan thanh\tQuay vong\tCho\n";
    for (auto &tt : ds) {
        cout << "P" << tt.ma << "\t"
             << tt.den << "\t"
             << tt.xuLy << "\t"
             << tt.hoanThanh << "\t\t"
             << tt.quayVong << "\t\t"
             << tt.cho << "\n";
        tongTAT += tt.quayVong;
        tongWT += tt.cho;
    }

    cout << fixed << setprecision(2);
    cout << "\nTAT trung binh = " << (tongTAT / n);
    cout << "\nWT trung binh  = " << (tongWT / n) << "\n";

    return 0;
}
